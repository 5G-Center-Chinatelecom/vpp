stages:
- prepare
- build
- test

variables:
  REGISTRY: "quay.io"
  CONTAINER_IMAGE: travelping/upf
  # this points to buildkitd k8s service
  BUILDKITD_ADDR: tcp://buildkitd:1234
  # This is needed to disable TLS in recent docker:...dind images.
  # TLS there is not really needed as docker client connects
  # to localhost, and all of the docker certs only cause problems
  # here
  DOCKER_TLS_CERTDIR: ""

# prepare build image
prepare:
  stage: prepare
  image: moby/buildkit:v0.7.1@sha256:530396a0ef93eacc025dadeb6a8a69d8c87ca402f48df9bc7c8c767b46fe9cf3
  services:
  - docker:19.03.8-dind
  script:
  - export DOCKER_HOST="tcp://localhost:2375"
  - echo "registry login..."
  # 'docker' command not available in the buildkit image
  - >
    REGISTRY_LOGIN=${QUAY_USER_ID}
    REGISTRY_PASSWORD=${QUAY_TOKEN}
    extras/docker/registry-login.sh "${REGISTRY}"
  - echo "Ensuring that proper build image exists ..."
  - USE_BUILDCTL_AND_PUSH=1 sh extras/docker/ensure-build-image.sh
  only:
    changes:
    - .gitlab-ci.yml
    - Makefile
    - extras/docker/Dockerfile.build
    - build/external/**/*

# build container image
.build:
  stage: build
  #tags:
  #  - docker
  image: quay.io/travelping/upf-build:f955d38d530fe59920c8fff355bb89fb # XX_DO_NOT_REMOVE_THIS_COMMENT
  services:
  - docker:19.03.8-dind
  script:
  - >
    REGISTRY_LOGIN=${QUAY_USER_ID}
    REGISTRY_PASSWORD=${QUAY_TOKEN}
    extras/docker/ci-build.sh
  - mv /tmp/_out "${CI_BUILD_NAME##*:}"
  dependencies:
  - prepare

# build container image
build:release:
  extends: .build
  variables:
    DOCKERFILE: Dockerfile
  artifacts:
    when: always
    untracked: true
    paths:
    - release/debs
    - release/testfiles.tar.gz

build:debug:
  extends: .build
  variables:
    DOCKERFILE: Dockerfile.devel
  artifacts:
    when: always
    untracked: true
    paths:
    - debug/debs
    - debug/testfiles.tar.gz

.test:
  stage: test
  # the following is updated automatically by extras/docker/update-build-image-tag.sh
  image: quay.io/travelping/upf-build:f955d38d530fe59920c8fff355bb89fb # XX_DO_NOT_REMOVE_THIS_COMMENT
  # FIXME: try not to use docker:dind. This may cause problems with shm_size
  services:
  - docker:19.03.8-dind
  script:
  - tar -xvzf ${TEST_ARCHIVE}
  # temporary workaround for the hugepages issue
  - sysctl vm.nr_hugepages=0
  - |
    mkdir test-out
    export LC_ALL=C.UTF-8
    export LANG=C.UTF-8
    if ! make -j8 ${TEST_TARGET} TEST=test_upf V=1; then
      tar -C /tmp -cvzf test-out/vpp-test.tar.gz . || true
      tar -C build-root/install-vpp_debug-native/ \
          -cvzf test-out/vpp.tar.gz vpp
      ls -l test-out/
      exit 1
    fi
  artifacts:
    when: on_failure
    paths:
    - test-out

test:debug:
  extends: .test
  variables:
    TEST_ARCHIVE: debug/testfiles.tar.gz
    TEST_TARGET: retest-debug
  dependencies:
  - build:debug

test:release:
  extends: .test
  variables:
    TEST_ARCHIVE: release/testfiles.tar.gz
    TEST_TARGET: retest
  dependencies:
  - build:release

.test-ext:
  stage: test
  image: quay.io/travelping/upf-test:69bbd8b
  services:
  - docker:19.03.8-dind
  before_script:
  # https://github.com/docker/compose/issues/5696#issuecomment-377906769
  - export COMPOSE_INTERACTIVE_NO_CLI=1
  - CI_COMMIT_DESCRIBE=$(git describe --always --tags --dirty --first-parent)
  - CONTAINER_VARIANT=debug
  - CONTAINER_BASE_NAME=${REGISTRY}/${CONTAINER_IMAGE}:${CI_COMMIT_REF_SLUG}
  - CONTAINER_GIT_DESCRIBE=${CONTAINER_BASE_NAME}_${CI_COMMIT_DESCRIBE}_${CONTAINER_VARIANT}
  - SRC_DIR="${PWD}"
  - cd /test
  # temporary workaround for the hugepages issue
  - sysctl vm.nr_hugepages=0
  - docker-compose -f "${DOCKER_COMPOSE_FILE}" build --build-arg UNODE_BASE="${CONTAINER_GIT_DESCRIBE}"
  script:
  - docker-compose -f "${DOCKER_COMPOSE_FILE}" run -e SESSION_MODIFICATION_COUNT=10 --rm cnodestub || exit 1
  after_script:
  - SRC_DIR="${PWD}"
  - mkdir "${SRC_DIR}/pcaps"
  - cd /test
  - |
    if [[ ${TEST_TYPE} = "proxy" ]]; then
      docker-compose logs --tail=1000 unode
    elif ! scripts/vpp-report.sh | gzip >& "${SRC_DIR}/pcaps/report.txt.gz"; then
      gunzip -c "${SRC_DIR}/pcaps/report.txt.gz"
    fi
  # FIXME: the following fails with "invalid tar magic"
  # - docker-compose -f "${DOCKER_COMPOSE_FILE}" run --rm -T grabpcaps | tar -xv
  - docker run --rm -v test_pcaps:/pcaps busybox:1.31.1 tar -C / -c pcaps | tar -C "${SRC_DIR}" -xv
  - ls -l "${SRC_DIR}/pcaps"
  dependencies:
  - build:debug
  artifacts:
    paths:
    - pcaps

test:external-ipv4:
  extends: .test-ext
  variables:
    DOCKER_COMPOSE_FILE: docker-compose.yaml

test:external-ipv6:
  extends: .test-ext
  variables:
    DOCKER_COMPOSE_FILE: docker-compose-v6.yaml

test:external-proxy-crash:
  extends: .test-ext
  variables:
    DOCKER_COMPOSE_FILE: docker-compose-tcp.yaml
    TEST_TYPE: proxy
  script:
  - USE_GDB=1 GDB_OPTS=--batch docker-compose -f docker-compose-tcp.yaml run client || exit 1

test:external-proxy-crash-netem:
  extends: .test-ext
  variables:
    DOCKER_COMPOSE_FILE: docker-compose-tcp.yaml
    TEST_TYPE: proxy
  script:
  - USE_GDB=1 GDB_OPTS=--batch docker-compose -f docker-compose-tcp.yaml run client || exit 1
